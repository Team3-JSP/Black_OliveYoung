<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.blackolive.app.mapper.counselor.CounselorPersonalAskMapper">
	
	<!-- 1:1문의 리스트
	List<PersonalAskVO> getPersonalAskList(String userId) throws ClassNotFoundException, SQLException; -->
		
	<!-- 문의 카테고리 대분류
	List<String> getmajCategory() throws ClassNotFoundException, SQLException; -->
	<select id="getmajCategory" resultType="String">
		SELECT DISTINCT ask_category_major
		FROM ask_category
		WHERE NOT ask_category_major ='TOP10'
	</select>
	
	<!-- 문의 카테고리 소분류
	List<String> getminCategory(String askCategoryMajor) throws ClassNotFoundException, SQLException; -->
	<select id="getminCategory" resultType="String">
	SELECT ask_category_minor 
	FROM ask_category 
	WHERE ask_category_major = #{param1}
	</select>
	
	<!-- 문의 키워드
	List<String> faqKeyword(@Param("faqTitle") String faqTitle) throws ClassNotFoundException, SQLException; -->
	<select id="faqKeyword" resultType="FaqVO">
		SELECT t.faq_title as faqTitle, t.faq_content as faqContent
		FROM ( 
			SELECT faq_title , faq_content 
			FROM faq 
			WHERE faq_title LIKE '%' || #{faqKeyword} || '%'
			ORDER BY faq_title 
			) t 
		<![CDATA[	
		WHERE ROWNUM <=2
		]]>
	</select>
	
	<!-- //1:1문의 등록
	int addPersonalAsk(PersonalAskVO askVo, String userId) throws ClassNotFoundException, SQLException; -->
	<insert id="addPersonalAsk">
		INSERT INTO personal_ask ( personal_ask_id, user_id, ask_category_id, order_id, personal_ask_content, personal_ask_img ) 
		VALUES ( 'AC_'|| personal_ask_seq.NEXTVAL, #{userId}, ${askCategoryId}, #{orderId, jdbcType=VARCHAR}, #{personalAskContent}, #{personalAskImg, jdbcType=VARCHAR} )
	</insert>
	
	<!-- //주문내역 조회
	List<PersonalAskDTO> getOrderList (String userId) throws ClassNotFoundException, SQLException; -->
	<select id="getOrderList" resultType="PersonalAskVO">
	SELECT o.order_date AS orderDate, op.order_id AS orderId, pd.product_display_name AS productDisplayName
				, p.product_name AS productName, op.product_cnt AS productCnt, o.order_status AS orderStatus
	FROM product p LEFT JOIN product_display pd ON p.product_display_id = pd.product_display_id
               			  RIGHT JOIN order_product op ON p.product_id = op.product_id
               			  LEFT JOIN olive_order o ON o.order_id = op.order_id
	WHERE o.user_id = #{userId}
	</select>
	
</mapper>